[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/make_blog/index.html",
    "href": "posts/make_blog/index.html",
    "title": "How to make a quarto blog",
    "section": "",
    "text": "This post contains instruction about how to make your first post using Quarto blog."
  },
  {
    "objectID": "posts/make_blog/index.html#creating-a-new-blog",
    "href": "posts/make_blog/index.html#creating-a-new-blog",
    "title": "How to make a quarto blog",
    "section": "Creating a new blog",
    "text": "Creating a new blog\n\nOpen VSCode\nCreate a new blog project:\n\nPress Ctrl+Shift+P (Windows/Linux) or Cmd+Shift+P (Mac)\nType “Quarto: Create Project”\nSelect “Blog Project”\nChoose a directory for your blog\nEnter a title for your blog\n\nOpen the project:\n\nGo to File &gt; Open Folder\nSelect your blog directory\n\nPreview your blog:\n\nClick the “Preview” button in the top right corner of VSCode\nOr press Ctrl+Shift+P and type “Quarto: Preview”"
  },
  {
    "objectID": "posts/make_blog/index.html#adding-a-new-post",
    "href": "posts/make_blog/index.html#adding-a-new-post",
    "title": "How to make a quarto blog",
    "section": "Adding a new post",
    "text": "Adding a new post\n\nCreate a new post:\n\nRight-click on the posts folder\nSelect “New Folder”\nName it (e.g., “my-first-post”)\n\nCreate the post file:\n\nRight-click on your new folder\nSelect “New File”\nName it “index.qmd”\n\nAdd YAML header to your post:\n---\ntitle: \"My Post Title\"\nauthor: \"Your Name\"\ndate: \"2025-10-06\"\ncategories: [news, analysis]\n---\nWrite your content using markdown\nPreview changes:\n\nClick the “Preview” button in the top right corner\nOr use Command Palette (Ctrl+Shift+P / Cmd+Shift+P) and type “Quarto: Preview”"
  },
  {
    "objectID": "posts/make_blog/index.html#publishing",
    "href": "posts/make_blog/index.html#publishing",
    "title": "How to make a quarto blog",
    "section": "Publishing",
    "text": "Publishing\n\nRender your post\nDeploy to GitHub Pages or your preferred hosting service"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MedBioInfo Blog",
    "section": "",
    "text": "Running reproducible analysis using pixi or containers for environment management\n\n\n\npixi\n\ndocker\n\napptainer\n\nqc\n\n\n\n\n\n\n\n\n\nOct 7, 2025\n\n\nKonstantin Danilov\n\n\n\n\n\n\n\n\n\n\n\n\nHow to make a quarto blog\n\n\n\nquarto\n\n\n\n\n\n\n\n\n\nOct 6, 2025\n\n\nKonstantin Danilov\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/pixi_containers/index.html",
    "href": "posts/pixi_containers/index.html",
    "title": "Running reproducible analysis using pixi or containers for environment management",
    "section": "",
    "text": "Learn how to manage dependencies and share your analysis environment with others using pixi and containers."
  },
  {
    "objectID": "posts/pixi_containers/index.html#managing-environments-using-pixi",
    "href": "posts/pixi_containers/index.html#managing-environments-using-pixi",
    "title": "Running reproducible analysis using pixi or containers for environment management",
    "section": "Managing environments using pixi",
    "text": "Managing environments using pixi\nPixi is a modern, fast, and conda-compatible environment manager. It helps create isolated environments for your projects, handling dependencies across multiple programming languages. Key features include:\n\nFast package installation and environment creation\nConda-compatible, accessing the same package ecosystem\nLockfile support for reproducible environments\nSimple CLI interface with intuitive commands\nMulti-language support (Python, R, C++, etc.)\n\n\n\n\n\n\n\nTip\n\n\n\nTo get started with pixi, first install it following the installation guide.\n\n\n\nCreate a new environment\nIt is a good practice to have a separate env for every project. In order to configure a new env in the currect project directory use command:\npixi init -c conda-forge -c bioconda\nIf you want to add something (for example fastqc) to the env use:\npixi add fastqc\nYou can test it using:\npixi run fastqc --help\nor by activating env:\npixi shell\nfastqc\n\n\nAlternatives\nOf course there are several environment managers avaliable, you can check pros and cons of common ones in this table:\n\n\n\n\n\n\n\n\n\nTool\nDescription\nPros\nCons\n\n\n\n\nconda\nPackage and environment manager for many programming languages\n- Multi-language support- Large package ecosystem- Industry standard\n- Slow resolver- Heavy installation- Complex dependency handling\n\n\npixi\nFast conda-compatible environment manager\n- Fast installation- Lockfile support- Conda-compatible\n- Relatively new- Smaller community- Limited documentation\n\n\nvenv\nPython built-in virtual environment tool\n- Lightweight- Built into Python- Simple to use\n- Python-only- No dependency resolution- Basic feature set\n\n\nvirtualenv\nEnhanced virtual environment tool\n- Mature project- Good integration- Cross-platform\n- Python-only- Manual dependency management- No lockfile by default\n\n\npoetry\nModern Python dependency manager\n- Modern workflow- Good dependency resolver- Project management\n- Python-only- Learning curve- Can be slow"
  },
  {
    "objectID": "posts/pixi_containers/index.html#get-more-control-using-containers",
    "href": "posts/pixi_containers/index.html#get-more-control-using-containers",
    "title": "Running reproducible analysis using pixi or containers for environment management",
    "section": "Get more control using containers",
    "text": "Get more control using containers\nContainers offer a higher level of isolation and reproducibility by packaging not just the dependencies, but the entire runtime environment. Two popular containerization solutions are:\n\nDocker: Industry standard for containerization, suitable for development and testing\n\nCreates lightweight, portable environments\nExtensive ecosystem of pre-built images (Dockerhub)\nGreat for CI/CD pipelines\n\nSingularity/Apptainer: Designed for HPC and scientific computing (no root required)\n\nBetter security model for shared systems\nNative support for HPC workloads\nSeamless conversion from Docker containers\n\n\n\n\n\n\n\n\nTip\n\n\n\nSince we don’t have root rights on our server, we’re going to use apptainers in connection with singularity images. But this is not a problem - we still can use Docker images after conversion to singularity.\n\n\n\nSource\nThere are many ways how to get a container:\n\nPull from container registry (DockerHub)\nConvert Docker image to Singularity\nBuild from definition file\nConstruct container using Wave (Sequera)\n\n\n\nCreating the container\nWe can use the following command to create our first container:\napptainer pull &lt;name.sif&gt; &lt;link_to_container&gt;\n\n\n\n\n\n\nTip\n\n\n\nNote, it is better to use specific version in the file name.\n\n\n\n\nRun tools within a container\n\nRunning ‘from the outside’Running ‘from the inside’\n\n\nRun the command inside the container (good for pipelines):\napptainer exec &lt;name-of-container&gt; &lt;command&gt;\n\n\nRun in interactive mode (good for debugging):\napptainer shell &lt;name-of-container&gt;"
  }
]