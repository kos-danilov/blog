---
title: "ggplot2 for advanced visalization"
author: "Konstantin Danilov"
date: "2025-10-10"
categories: [R, ggplot2, visalization]
image: "image.png"
---

`ggplot2` is the best R tool for making charts and graphs. Let's look at a quick example to see how it works when you make adjustments.

The power of `ggplot2` stems from the Grammar of Graphics philosophy, which allows you to build any plot by defining mappings and adding visual components layer by layer. This approach ensures high reproducibility and customization by giving you explicit control over every element. The primary layers of control are:

- **Data & Aesthetics** (aes()): Linking your data variables to visual properties (like `position`, `color`, and `size`).
- **Geometric Objects** (geom_*): The visible markers (`points`, `bars`, `lines`) that represent the data.
- **Statistical Transformations** (stat_*): Used to summarize or model the data (e.g., `smoothing` or `counting`) before plotting.
- **Scales** (scale_*): Fine-tunes how the aesthetic mappings are rendered, controlling axis `breaks`, `limits`, and `color palettes`.
- **Facets** (facet_*): A powerful tool for splitting the visualization into multiple panels for easy group comparisons.
- **Themes & Coordinates** (theme_*): Controls the non-data appearance (`fonts`, `grid lines`) and the plot's spatial layout.

![ggplot2 components](ggplot2.png)

## Economist Scatterplot

Using following [dataset]((https://www.dropbox.com/s/7imn0eoey9ckxh5/data_economist.csv?dl=1)) we can reproduce this figure:

![The Economist plot](economist.png)

Original code by `Raukr`. Main components:

```{.bash}
p <- ggplot(ec,aes(x=CPI,y=HDI,color=Region))+
      geom_smooth(aes(fill="red"),method="lm",formula=y~poly(x,2),se=F,color="red",size=0.6)+
      geom_point(shape=21,size=3,stroke=0.8,fill="white")
p
```
![plot1](plot1.png)

Text and labels:
```{.bash}
library(ggrepel)
library(extrafont)
font_import(pattern="Gidole",prompt=FALSE)

labels <- c("Congo","Afghanistan","Sudan","Myanmar","Iraq","Venezuela","Russia","Argentina","Brazil","Italy","South Africa","Cape Verde","Bhutan","Botswana","Britian","New Zealand","Greece","China","India","Rwanda","Spain","France","United States","Japan","Norway","Singapore","Barbados","Germany")

p <- p+geom_text_repel(data=subset(ec,Country %in% labels),aes(label=Country),
                       color="black",box.padding=unit(1,'lines'),segment.size=0.25,
                       size=3,family="Gidole")
p
```

![plot2](plot2.png)

Axes and scale colors:

```{.bash}
p <- p+scale_x_continuous(name="Corruption Perceptions Index, 2011 (10=least corrupt)",
                          breaks=1:10,limits=c(1,10))+
      scale_y_continuous(name="Human Development Index, 2011 (1=best)",
                         breaks=seq(from=0,to=1,by=0.1),limits=c(0.2,1))
p <- p+scale_color_manual(values=c("#23576E","#099FDB","#29B00E", "#208F84","#F55840","#924F3E"))+
       scale_fill_manual(name="trend",values="red",labels=expression(paste(R^2,"=52%")))
p
```

![plot3](plot3.png)

Title and theme:

```{.bash}
p <- p+labs(title="Corruption and human development",
            caption="Sources: Transparency International; UN Human Development Report")
p <- p+guides(color=guide_legend(nrow=1))+
       theme_bw(base_family="Gidole")+
       theme(legend.position="top")
p
```

![plot4](plot4.png)

::: {.callout-tip}
Sometimes it's faster and more convenient to post-process vector images after saving them from `ggplot2` than to set all the parameters within the R code. However, you can save and reuse "standard" themes by keeping them in a separate R script file.
:::

There are many R packages built on top of ggplot2 that simplify visualization tasks while inheriting its core logic. You can find some of them listed [here](https://exts.ggplot2.tidyverse.org/gallery/)